---
title: XSD Based Form Generation
layout: default
---

Intalio Designer can use an existing XSD to automatically generate an Intalio|Ajax form.  The generated form will be a _*best try*_.  It may not always generate the perfect form you had in mind, but it should be a good starting point.

pre(xml-format). <xs:element name="Name">
  <xs:complexType>
    <xs:sequence>
      <xs:element type="xs:string" name="first-name" minOccurs="0">
        <xs:annotation us:label="First name"/>
      </xs:element>
      <xs:element type="xs:string" name="last-name" minOccurs="0">
        <xs:annotation us:label="Last name"/>
      </xs:element>        
    </xs:sequence>
  </xs:complexType>
</xs:element>

The above XSD snippet will generate the following form.  The @<annotation>@ elements are optional and are used to render the form label.  As you can see the rest of the schema is typical.  You can download this XSD "here (Name.xsd)":files/Name.xsd.

!(shot-border)screenshots/simple-xsd-form-gen.png!

h2. Creating A Form From An Existing XSD

In order to generate the form from an existing schema, first, open up the schema in the *Process Explorer*.  Then right click the schema element that you would like to use as the basis as your form, then choose *New :: AJAX Form*. 

!(shot-border)screenshots/right-click-xsd.png!

This will open up the *New Ajax Form* wizard.  The defaults are typically good but you can customize to suit your needs.  The most important checkbox is the one entitled *Generate initial form from schema*.  This must be checked in order for the form to be created from the XSD.

!(shot-border)screenshots/xsd-form-wizard.png!

If you wish you can choose a separate input and output schema.  If this option is chosen then the form will be generated based on the input schema.

h2. Annotations, Enumerations, and XSD Data Types

The following XSD annotations are supported to assist in generating the form.

*(annotation)Annotation:* label
*(annotation)Purpose:* Sets the label for the field.

pre(xml-format). <xs:element name="deliveryDate" type="xs:date">
  <xs:annotation us:label="Date"/>
</xs:element>

*(annotation)Annotation:* widgetType
*(annotation)Purpose:* Sets the input type for the field.

pre(xml-format). <xs:element name="password" type="xs:string">
  <xs:annotation us:label="Password" us:widgetType="password"/>
</xs:element>

You can also use enumerations to populate values for lists, radio buttons, and checkboxes.  Here are some examples.

The following will generate a select field with the enumeration values as the select list.  

pre(xml-format). <xs:element name="version">
  <xs:annotation us:label="Version"/>
  <xs:simpleType>
    <xs:restriction base="xs:string">
      <xs:enumeration value="1.0"/>
      <xs:enumeration value="1.1"/>
      <xs:enumeration value="2.1"/>
      <xs:enumeration value="3.0"/>
    </xs:restriction>
  </xs:simpleType>
</xs:element>     

When an enumeration is given, then default input is a select object.  This can be changed with the widgetType annotation.  The following will generate a radio group with the 3 options given. 

pre(xml-format). <xs:element name="operatingSystem">
  <xs:annotation us:label="Operating System" us:widgetType="radio"/>
  <xs:simpleType>
    <xs:restriction base="xs:string">
      <xs:enumeration value="Linux"/>
      <xs:enumeration value="Mac"/>
      <xs:enumeration value="Windows"/>
    </xs:restriction>
  </xs:simpleType>
</xs:element>

h2. XSD Data Types

Here are the default input fields created from the 
Here's how the XSD data types are used to create input fields.  

|_. Data Type|_. Input Field|
|xs:string|Text Input|
|xs:date|Date Picker|
|xs:time|Time Picker|
|xs:boolean|Checkbox|

h2. GI Mappings

When the form is auto-generated from the schema, the initial GI mappings will be generated and saved as @rules/UserSchemaMapping.xml@.  You can double-click this file to edit the mappings if you wish.

!(shot-border)screenshots/xsd-mapping-file.png!

*(note)Note:* If you add or remove fields to the form or rename fields, then you will need to make changes to the mapping file manually.  Currently Intalio|Ajax doesn't modify the mapping file automatically when the form is generated from a schema.

